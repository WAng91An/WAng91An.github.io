---
layout: post
title: SSM框架整合
date: 2018-01-01 00:00:00 +0300
description: SSM框架整和 # Add post description (optional)
img: workflow.jpg # Add image post (optional)
tags: [SSM] # add tag
---

The framework of SSM，Spring+SpringMVC+MyBatis is integrated by Spring, SpringMVC and MyBatis three open source frameworks, and is often used as a framework for simple web projects of data sources.
- 其中spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。
- SpringMVC分离了控制器、模型对象、分派器以及处理程序对象的角色，这种分离让它们更容易进行定制。
- MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。

ssm框架整合基础配置

### pom.xml





```
     <dependencies>

        <dependency>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
          <version>4.12</version>
          <!--<scope>test</scope>-->
        </dependency>

        <!-- SpringMVC Spring-->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-webmvc</artifactId>
          <version>4.3.7.RELEASE</version>
        </dependency>

        <!-- Spring jdbc-->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-jdbc</artifactId>
          <version>4.3.7.RELEASE</version>
        </dependency>

        <!-- Spring 单元测试-->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-test</artifactId>
          <version>4.3.7.RELEASE</version>
          <!--<scope>test</scope>-->
        </dependency>

        <!-- Spring事务管理-->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-aspects</artifactId>
          <version>4.3.7.RELEASE</version>
        </dependency>

        <!-- Mybatis -->
        <dependency>
          <groupId>org.mybatis</groupId>
          <artifactId>mybatis</artifactId>
          <version>3.4.2</version>
        </dependency>
        <!-- Mybatis 整合spring  -->
        <dependency>
          <groupId>org.mybatis</groupId>
          <artifactId>mybatis-spring</artifactId>
          <version>1.3.1</version>
        </dependency>

        <!-- 代码生成器  -->
        <dependency>
          <groupId>org.mybatis.generator</groupId>
          <artifactId>mybatis-generator-core</artifactId>
          <version>1.3.5</version>
        </dependency>


        <!-- 数据连接池 jar   -->
        <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>5.1.41</version>
        </dependency>

        <dependency>
          <groupId>com.mchange</groupId>
          <artifactId>c3p0</artifactId>
          <version>0.9.2</version>
        </dependency>

        <!-- 返回json字符串 -->
        <dependency>
          <groupId>com.fasterxml.jackson.core</groupId>
          <artifactId>jackson-databind</artifactId>
          <version>2.8.8</version>
        </dependency>

        <!-- jstl servlet-api -->
        <dependency>
          <groupId>jstl</groupId>
          <artifactId>jstl</artifactId>
          <version>1.2</version>
        </dependency>

        <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <version>3.1.0</version>
          <scope>provided</scope>
        </dependency>

        <!--jsp-->
        <dependency>
          <groupId>javax.servlet.jsp</groupId>
          <artifactId>javax.servlet.jsp-api</artifactId>
          <version>2.2.1</version>
          <scope>provided</scope>
        </dependency>

        <!-- 分页插件 -->
        <dependency>
          <groupId>com.github.pagehelper</groupId>
          <artifactId>pagehelper</artifactId>
          <version>5.0.0</version>
        </dependency>


      </dependencies>
```
### web.xml
```
     <!--  启动Spring的容器 -->
      <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
      </context-param>

      <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
      </listener>

      <!-- Spring 前端控制器，拦截请求 -->
      <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
      </servlet>

      <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/</url-pattern>
      </servlet-mapping>

      <!-- 字符过滤器,所有过滤器之前-->
      <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
          <param-name>encoding</param-name>
          <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
          <param-name>forceEncoding</param-name>
          <param-value>true</param-value>
        </init-param>
      </filter>

      <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
      </filter-mapping>

      <!-- 使用Rest风格的URI,将页面普通的post请求转化为指定的delete或者put请求 -->
      <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
      </filter>
      <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
      </filter-mapping>
```
### dispatcher-servlet.xml(web.xml同级目录下面)
```
	<!-- SpringMvc配置文件，网站跳转逻辑的配置 -->
    <context:component-scan base-package="com.wrq" use-default-filters="false">
        <!-- 只扫描controller -->
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 试图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!-- 两个标准的配置 -->
    <!-- 将springMvc 不能处理的交给tomcat -->
    <mvc:default-servlet-handler/>
    <!-- springMvc 更高级的功能，JSR303校验，快捷的ajax，映射动态请求 -->
    <mvc:annotation-driven/>
```

### applicationContext.xml(resources)
```
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
           xmlns:tx="http://www.springframework.org/schema/tx"
           xmlns:context="http://www.springframework.org/schema/context"
           xsi:schemaLocation="
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

        <!-- 不扫码controller-->
        <context:component-scan base-package="com.wrq">
            <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>

        <!--Sping的配置文件，配置和业务逻辑有关的-->


        <!-- ====================数据源====================-->
        <context:property-placeholder location="classpath:dbconfig.properties"/>
        <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
            <property name="driverClass" value="${jdbc.driverClass}"/>
            <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
            <property name="user" value="${jdbc.user}"/>
            <property name="password" value="${jdbc.passowrd}"/>
        </bean>



        <!-- =================和mybatis整合=================-->
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <!-- 指定mybatis配置文件的位置-->
            <property name="configLocation" value="classpath:mybatis-config.xml"></property>
            <property name="dataSource" ref="pooledDataSource"></property>
            <!-- 指定mybatis的mapper文件的位置-->
            <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        </bean>
        <!-- 配置扫描器，将mybatis接口的实现加入到Ioc容器 -->
        <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <!-- 扫描所有dao接口的实现，加入到Ioc容器 -->
            <property name="basePackage" value="com.wrq.manage.dao"/>
        </bean>


        <!-- =================执行批量的sqlSession==================-->
        <bean id="SqlSession" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
            <constructor-arg name="executorType" value="BATCH"></constructor-arg>
        </bean>



        <!-- =================事务控制==================-->
        <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <!-- 控制数据源 -->
            <property name="dataSource" ref="pooledDataSource"/>
        </bean>
        <!-- 开启基于注解的事务，使用xml配置形式的事务-->
        <aop:config>
            <!-- 切入点表达式 -->
            <aop:pointcut id="txPoint" expression="execution(* com.wrq.manage.service..*(..))"/>
            <!-- 事务增强 -->
            <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
        </aop:config>
        <!-- 配置事务增强 -->
        <tx:advice id="txAdvice" transaction-manager="transactionManager">
            <tx:attributes>
                <!-- 所有方法都是事务方法-->
                <tx:method name="*"/>
                <!-- 以gat开始的所有方法-->
                <tx:method name="get" read-only="true"/>
            </tx:attributes>
        </tx:advice>


        <!-- Spring配置文件的核心点(数据源，整合，事务) -->
    </beans>
```

### dbconfig.properties(resources)

```
    jdbc.driverClass=com.mysql.jdbc.Driver
    jdbc.jdbcUrl=jdbc:mysql://localhost:3306/ssm_manage?characterEncoding=UTF-8
    jdbc.user=root
    jdbc.passowrd=rootadmin

```
### mybatis-config.xml(resources)

```
    <?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE configuration
            PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-config.dtd">
    <configuration>
        <settings>
            <setting name="mapUnderscoreToCamelCase" value="true"/>
        </settings>

        <typeAliases>
            <package name="com.wrq.manage.bean"/>
        </typeAliases>
        <!--引入分页插件-->
        <plugins>
            <plugin interceptor="com.github.pagehelper.PageInterceptor">
                <!--分页合理化-->
                <property name="reasonable" value="true"/>
            </plugin>
        </plugins>

    </configuration>
```
### generatorConfig.xml(根目录下面)
```
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE generatorConfiguration
            PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
            "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

    <generatorConfiguration>
        <context id="DB2Tables" targetRuntime="MyBatis3">
            <!--不生成注释-->
            <commentGenerator>
                <property name="suppressAllComments" value="true" />
            </commentGenerator>
            <!-- 数据库连接 -->
            <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                            connectionURL="jdbc:mysql://localhost:3306/ssm_manage?characterEncoding=UTF-8"
                            userId="root"
                            password="rootadmin">
            </jdbcConnection>

            <javaTypeResolver >
                <property name="forceBigDecimals" value="false" />
            </javaTypeResolver>

            <!-- javaBean生成位置 -->
            <javaModelGenerator targetPackage="com.wrq.manage.bean" targetProject=".\src\main\Java">
                <property name="enableSubPackages" value="true" />
                <property name="trimStrings" value="true" />
            </javaModelGenerator>
            <!-- sql映射文件生成的位置 -->
            <sqlMapGenerator targetPackage="mapper"  targetProject=".\src\main\resources">
                <property name="enableSubPackages" value="true" />
            </sqlMapGenerator>
            <!-- 指定dao接口生成的位置 ，mapper接口-->
            <javaClientGenerator type="XMLMAPPER" targetPackage="com.wrq.manage.dao"  targetProject=".\src\main\Java">
                <property name="enableSubPackages" value="true" />
            </javaClientGenerator>

            <!--  指定每个表生成的策略-->
            <table tableName="emp" domainObjectName="Employee" ></table>
            <table tableName="dept" domainObjectName="Department" ></table>

        </context>
    </generatorConfiguration>

```

### 自动生成bean mapper 需要运行以下代码
```
    package com.wrq.manage.test;
    public class GeneratorTest {
        public  static  void  main(String[] args) throws Exception {
            List<String> warnings = new ArrayList<String>();
            boolean overwrite = true;
            File configFile = new File("generatorConfig.xml");
            ConfigurationParser cp = new ConfigurationParser(warnings);
            Configuration config = cp.parseConfiguration(configFile);
            DefaultShellCallback callback = new DefaultShellCallback(overwrite);
            MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
            myBatisGenerator.generate(null);
        }
    }

```









